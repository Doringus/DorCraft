#include "noisegenerator.h"

#include <math.h>
#include <assert.h>
#include <stdlib.h>

static double noiseSeed = 0;

static uint8_t p[512] = {
    151,160,137,91,90,15,
    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,
    151,160,137,91,90,15,          
    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,   
    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
};

static double fade(double t) {
    return(t * t * t * (t * (t * 6 - 15) + 10));
}

static double grad(uint8_t hash, double x, double y, double z) {
    uint8_t h = hash & 15;
    double u = h < 8 ? x : y;
    double v = h < 4 ? y : h == 12 || h == 14 ? x : z;
    return(((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v));
}

static double lerp(double t, double a, double b) {
    return a + t * (b - a);
}

static double noise3D(double x, double y, double z) {
    int64_t X = (int64_t)floor(x) & 255;
    int64_t Y = (int64_t)floor(y) & 255;
    int64_t Z = (int64_t)floor(z) & 255;
    x -= floor(x);
    y -= floor(y);
    z -= floor(z);
    double u = fade(x);
    double v = fade(y);
    double w = fade(z);

    int32_t A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z;
    int32_t B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;

    return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),
        grad(p[BA], x - 1, y, z)),
        lerp(u, grad(p[AB], x, y - 1, z),
        grad(p[BB], x - 1, y - 1, z))),
        lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),
        grad(p[BA + 1], x - 1, y, z - 1)),
        lerp(u, grad(p[AB + 1], x, y - 1, z - 1),
        grad(p[BB + 1], x - 1, y - 1, z - 1))));
}

void perlinSeed(double seed) {
    noiseSeed = seed;
    for (uint32_t i = 0; i < 512; ++i) {
        uint32_t j = i + rand() / (noiseSeed / (512 - i) + 1);
        uint8_t t = p[j];
        p[j] = p[i];
        p[i] = t;
    }
}

double octavePerlin(double x, double z, uint16_t octaves) {
    assert(noiseSeed != 0);
    double result = 0;
    double ampl = 1;
    double max = 0;
    for (uint16_t i = 0; i < octaves; ++i) {
        max += ampl;
        result += (noise3D(x, z, 0) * ampl);
        x *= 2;
        z *= 2;
        ampl /= 2;
    }
    result = result * 0.5 + 0.5;
    if (result < 0) {
        result = 0;
    }
    if (result > 1) {
        result = 1;
    }
    return(result);
}
